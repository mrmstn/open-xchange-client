# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule OpenXchangeClient.Api.Quota do
  @moduledoc """
  API calls for all endpoints tagged `Quota`.
  """

  alias OpenXchangeClient.Connection
  import OpenXchangeClient.RequestBuilder

  @doc """
  Gets the filestore usage data.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.QuotaResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_filestore_usage(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, OpenXchangeClient.Model.QuotaResponse.t()} | {:error, Tesla.Env.t()}
  def get_filestore_usage(connection, session, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/quota?action&#x3D;filestore")
    |> add_param(:query, :session, session)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %OpenXchangeClient.Model.QuotaResponse{}}
    ])
  end

  @doc """
  Gets the mail usage data.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.QuotaResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_mail_usage(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, OpenXchangeClient.Model.QuotaResponse.t()} | {:error, Tesla.Env.t()}
  def get_mail_usage(connection, session, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/quota?action&#x3D;mail")
    |> add_param(:query, :session, session)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %OpenXchangeClient.Model.QuotaResponse{}}
    ])
  end

  @doc """
  Gets quota information.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - opts (KeywordList): [optional] Optional parameters
    - :module (String.t): The module identifier (e.g. \"share_links\", \"filestorage\", ...) to get quota information for, required if account is set.
    - :account (String.t): The account identifier within the module to get quota information for.
  ## Returns

  {:ok, OpenXchangeClient.Model.QuotasResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_quota_information(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, OpenXchangeClient.Model.QuotasResponse.t()} | {:error, Tesla.Env.t()}
  def get_quota_information(connection, session, opts \\ []) do
    optional_params = %{
      :module => :query,
      :account => :query
    }

    %{}
    |> method(:get)
    |> url("/quota?action&#x3D;get")
    |> add_param(:query, :session, session)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %OpenXchangeClient.Model.QuotasResponse{}},
      {400, false}
    ])
  end
end
