# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule OpenXchangeClient.Api.Multifactor do
  @moduledoc """
  API calls for all endpoints tagged `Multifactor`.
  """

  alias OpenXchangeClient.Connection
  import OpenXchangeClient.RequestBuilder


  @doc """
  Gets all multifactor devices

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.MultifactorDevicesResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec multifactor_device_action_all(Tesla.Env.client, String.t, keyword()) :: {:ok, OpenXchangeClient.Model.MultifactorDevicesResponse.t} | {:error, Tesla.Env.t}
  def multifactor_device_action_all(connection, session, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/multifactor/device?action&#x3D;all")
    |> add_param(:query, :"session", session)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.MultifactorDevicesResponse{}}
    ])
  end

  @doc """
  Deletes a multifactor device

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - provider_name (String.t): The name of the multifactor provider
  - device_id (String.t): The ID of the multifactor device
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.MultifactorDeleteResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec multifactor_device_action_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, OpenXchangeClient.Model.MultifactorDeleteResponse.t} | {:error, Tesla.Env.t}
  def multifactor_device_action_delete(connection, session, provider_name, device_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/multifactor/device?action&#x3D;delete")
    |> add_param(:query, :"session", session)
    |> add_param(:query, :"providerName", provider_name)
    |> add_param(:query, :"deviceId", device_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.MultifactorDeleteResponse{}}
    ])
  end

  @doc """
  Renames an existing multifactor device

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - provider_name (String.t): The name of the multifactor provider
  - body (MultifactorDevice): A device containing the device ID, and the new name. 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.MultifactorDeviceResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec multifactor_device_action_rename(Tesla.Env.client, String.t, String.t, OpenXchangeClient.Model.MultifactorDevice.t, keyword()) :: {:ok, OpenXchangeClient.Model.MultifactorDeviceResponse.t} | {:error, Tesla.Env.t}
  def multifactor_device_action_rename(connection, session, provider_name, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/multifactor/device?action&#x3D;rename")
    |> add_param(:query, :"session", session)
    |> add_param(:query, :"providerName", provider_name)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.MultifactorDeviceResponse{}}
    ])
  end

  @doc """
  Starts the process of authentication against a multifactor device

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - provider_name (String.t): The name of the multifactor provider
  - device_id (String.t): The ID of the multifactor device
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.MultifactorStartAuthenticationResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec multifactor_device_action_start_authentication(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, OpenXchangeClient.Model.MultifactorStartAuthenticationResponse.t} | {:error, Tesla.Env.t}
  def multifactor_device_action_start_authentication(connection, session, provider_name, device_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/multifactor/device?action&#x3D;startAuthentication")
    |> add_param(:query, :"session", session)
    |> add_param(:query, :"providerName", provider_name)
    |> add_param(:query, :"deviceId", device_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.MultifactorStartAuthenticationResponse{}}
    ])
  end

  @doc """
  Starts the process of registering a new multifactor device

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - opts (KeywordList): [optional] Optional parameters
    - :body (MultifactorDevice): A device which should be registered as new multifactor device. 
  ## Returns

  {:ok, OpenXchangeClient.Model.MultifactorStartRegistrationResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec multifactor_device_action_start_registration(Tesla.Env.client, String.t, keyword()) :: {:ok, OpenXchangeClient.Model.MultifactorStartRegistrationResponse.t} | {:error, Tesla.Env.t}
  def multifactor_device_action_start_registration(connection, session, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/multifactor/device?action&#x3D;startRegistration")
    |> add_param(:query, :"session", session)
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.MultifactorStartRegistrationResponse{}}
    ])
  end

  @doc """
  Finishes authentication against a multifactor device

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - provider_name (String.t): The name of the multifactor provider
  - device_id (String.t): The ID of the multifactor device
  - body (MultifactorFinishAuthenticationData): The information required to finish the registration of a new multifactor device. 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.CommonResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec multifactor_device_actionfinish_authentication(Tesla.Env.client, String.t, String.t, String.t, OpenXchangeClient.Model.MultifactorFinishAuthenticationData.t, keyword()) :: {:ok, OpenXchangeClient.Model.CommonResponse.t} | {:error, Tesla.Env.t}
  def multifactor_device_actionfinish_authentication(connection, session, provider_name, device_id, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/multifactor/device?action&#x3D;finishAuthentication")
    |> add_param(:query, :"session", session)
    |> add_param(:query, :"providerName", provider_name)
    |> add_param(:query, :"deviceId", device_id)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.CommonResponse{}}
    ])
  end

  @doc """
  Finishes the process of registering a new multifactor device

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - provider_name (String.t): The name of the multifactor provider
  - device_id (String.t): The ID of the multifactor device
  - body (MultifactorFinishRegistrationData): The information required to finish the registration of a new multifactor device. 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.MultifactorFinishRegistrationResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec multifactor_device_actionfinish_registration(Tesla.Env.client, String.t, String.t, String.t, OpenXchangeClient.Model.MultifactorFinishRegistrationData.t, keyword()) :: {:ok, OpenXchangeClient.Model.MultifactorFinishRegistrationResponse.t} | {:error, Tesla.Env.t}
  def multifactor_device_actionfinish_registration(connection, session, provider_name, device_id, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/multifactor/device?action&#x3D;finishRegistration")
    |> add_param(:query, :"session", session)
    |> add_param(:query, :"providerName", provider_name)
    |> add_param(:query, :"deviceId", device_id)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.MultifactorFinishRegistrationResponse{}}
    ])
  end

  @doc """
  Gets all available multifactor providers

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - opts (KeywordList): [optional] Optional parameters
    - :providers (String.t): A comma separated list of provider names to return. Omit to return all available providers. 
  ## Returns

  {:ok, OpenXchangeClient.Model.MultifactorProvidersResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec multifactor_provider_action_all(Tesla.Env.client, String.t, keyword()) :: {:ok, OpenXchangeClient.Model.MultifactorProvidersResponse.t} | {:error, Tesla.Env.t}
  def multifactor_provider_action_all(connection, session, opts \\ []) do
    optional_params = %{
      :"providers" => :query
    }
    %{}
    |> method(:get)
    |> url("/multifactor/provider?action&#x3D;all")
    |> add_param(:query, :"session", session)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.MultifactorProvidersResponse{}}
    ])
  end
end
