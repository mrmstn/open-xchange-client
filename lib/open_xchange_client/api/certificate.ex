# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule OpenXchangeClient.Api.Certificate do
  @moduledoc """
  API calls for all endpoints tagged `Certificate`.
  """

  alias OpenXchangeClient.Connection
  import OpenXchangeClient.RequestBuilder

  @doc """
  Deletes all fingerprint/hostname combinations for the user
  Deletes all fingerprint/hostname combinations for the user

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_all_certificates(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_all_certificates(connection, session, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/certificate?action=deleteAll")
    |> add_param(:query, :session, session)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Deletes the fingerprint/hostname combination
  Deletes the fingerprint/hostname combination

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - fingerprint (String.t): The fingerprint of the SSL certificate
  - opts (KeywordList): [optional] Optional parameters
    - :hostname (String.t): The hostname for which the SSL certificate is trusted/not trusted. If absent, then all entries for the specified fingerprint will be deleted
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_certificate(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_certificate(connection, session, fingerprint, opts \\ []) do
    optional_params = %{
      :hostname => :query
    }

    %{}
    |> method(:put)
    |> url("/certificate?action=delete")
    |> add_param(:query, :session, session)
    |> add_param(:query, :fingerprint, fingerprint)
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Examines an untrusted SSL certificate from a previous endpoint call
  Examines an untrusted SSL certificate from a previous endpoint call. The SSL certificate is cached for a brief amount of time by the middleware (2 minutes).

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - fingerprint (String.t): The fingerprint of the SSL certificate
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.CertificateExamineResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec examine_certificate(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, OpenXchangeClient.Model.CertificateExamineResponse.t()} | {:error, Tesla.Env.t()}
  def examine_certificate(connection, session, fingerprint, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/certificate?action=examine")
    |> add_param(:query, :session, session)
    |> add_param(:query, :fingerprint, fingerprint)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %OpenXchangeClient.Model.CertificateExamineResponse{}}
    ])
  end

  @doc """
  Gets all SSL certificates.
  Returns all trusted and untrusted SSL certificates

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.CertificatesAllResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_all_certificates(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, OpenXchangeClient.Model.CertificatesAllResponse.t()} | {:error, Tesla.Env.t()}
  def get_all_certificates(connection, session, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/certificate?action=all")
    |> add_param(:query, :session, session)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %OpenXchangeClient.Model.CertificatesAllResponse{}}
    ])
  end

  @doc """
  Gets a specific or all SSL certificates
  Gets a specific or all SSL certificates

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - fingerprint (String.t): The fingerprint of the SSL certificate
  - opts (KeywordList): [optional] Optional parameters
    - :hostname (String.t): The hostname for which the SSL certificate is trusted/not trusted. If absent, then all entries for the specified fingerprint will be returned
  ## Returns

  {:ok, OpenXchangeClient.Model.CertificatesAllResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_certificate(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, OpenXchangeClient.Model.CertificatesAllResponse.t()} | {:error, Tesla.Env.t()}
  def get_certificate(connection, session, fingerprint, opts \\ []) do
    optional_params = %{
      :hostname => :query
    }

    %{}
    |> method(:get)
    |> url("/certificate?action=get")
    |> add_param(:query, :session, session)
    |> add_param(:query, :fingerprint, fingerprint)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %OpenXchangeClient.Model.CertificatesAllResponse{}}
    ])
  end

  @doc """
  Stores the fingerprint of an SSL certificate.
  Stores the fingerprint of an SSL certificate in combination with a hostname as either trusted or untrusted. This API call also accepts a JSONObject.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - fingerprint (String.t): The fingerprint of the SSL certificate
  - hostname (String.t): The hostname for which to trust/untrust the SSL certificate
  - trust (boolean()): Whether the combination of the SSL certificate and the hostname is to be trusted
  - opts (KeywordList): [optional] Optional parameters
    - :body (CertificateStoreData): A JSON object describing the SSL certificate.
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec store_certificate(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          boolean(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def store_certificate(connection, session, fingerprint, hostname, trust, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/certificate?action=store")
    |> add_param(:query, :session, session)
    |> add_param(:query, :fingerprint, fingerprint)
    |> add_param(:query, :hostname, hostname)
    |> add_param(:query, :trust, trust)
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Updates the exception for an SSL certificate in combination with a hostname as either trusted or untrusted

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - fingerprint (String.t): The fingerprint of the SSL certificate
  - hostname (String.t): The hostname for which to trust/untrust the SSL certificate
  - trust (boolean()): Whether the combination of the SSL certificate and the hostname is to be trusted
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec store_certificate_0(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          boolean(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def store_certificate_0(connection, session, fingerprint, hostname, trust, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/certificate?action=update")
    |> add_param(:query, :session, session)
    |> add_param(:query, :fingerprint, fingerprint)
    |> add_param(:query, :hostname, hostname)
    |> add_param(:query, :trust, trust)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false}
    ])
  end
end
