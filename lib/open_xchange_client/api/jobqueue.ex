# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule OpenXchangeClient.Api.Jobqueue do
  @moduledoc """
  API calls for all endpoints tagged `Jobqueue`.
  """

  alias OpenXchangeClient.Connection
  import OpenXchangeClient.RequestBuilder

  @doc """
  Get all user's jobs

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.AllJobsResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec all_jobs(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, OpenXchangeClient.Model.AllJobsResponse.t()} | {:error, Tesla.Env.t()}
  def all_jobs(connection, session, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/jobs?action=all")
    |> add_param(:query, :session, session)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %OpenXchangeClient.Model.AllJobsResponse{}}
    ])
  end

  @doc """
  Cancels a certain job held in job queue

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - id (String.t): The identifier for the job
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.CancelJobResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec cancel_job(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, OpenXchangeClient.Model.CancelJobResponse.t()} | {:error, Tesla.Env.t()}
  def cancel_job(connection, session, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/jobs?action=cancel")
    |> add_param(:query, :session, session)
    |> add_param(:query, :id, id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %OpenXchangeClient.Model.CancelJobResponse{}}
    ])
  end

  @doc """
  Gets the result of a certain job

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - id (String.t): The identifier for the job
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_job(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, OpenXchangeClient.Model.GetJobResponse.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def get_job(connection, session, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/jobs?action=get")
    |> add_param(:query, :session, session)
    |> add_param(:query, :id, id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false},
      {202, %OpenXchangeClient.Model.GetJobResponse{}}
    ])
  end

  @doc """
  Gets the informartion about a certain job held in job queue

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - id (String.t): The identifier for the job
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.InfoJobResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec info_job(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, OpenXchangeClient.Model.InfoJobResponse.t()} | {:error, Tesla.Env.t()}
  def info_job(connection, session, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/jobs?action=info")
    |> add_param(:query, :session, session)
    |> add_param(:query, :id, id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %OpenXchangeClient.Model.InfoJobResponse{}}
    ])
  end
end
