# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule OpenXchangeClient.Api.ShareManagement do
  @moduledoc """
  API calls for all endpoints tagged `ShareManagement`.
  """

  alias OpenXchangeClient.Connection
  import OpenXchangeClient.RequestBuilder


  @doc """
  Deletes a share link.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - timestamp (integer()): The timestamp of the last modification of the link. Used to detect concurrent modifications.
  - body (ShareTargetData): A JSON object containing the share target where the link should be deleted for.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.CommonResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_share_link(Tesla.Env.client, String.t, integer(), OpenXchangeClient.Model.ShareTargetData.t, keyword()) :: {:ok, OpenXchangeClient.Model.CommonResponse.t} | {:error, Tesla.Env.t}
  def delete_share_link(connection, session, timestamp, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/share/management?action&#x3D;deleteLink")
    |> add_param(:query, :"session", session)
    |> add_param(:query, :"timestamp", timestamp)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.CommonResponse{}}
    ])
  end

  @doc """
  Creates or gets a share link.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - body (ShareTargetData): A JSON object containing the share target where the link should be generated for.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.ShareLinkResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_share_link(Tesla.Env.client, String.t, OpenXchangeClient.Model.ShareTargetData.t, keyword()) :: {:ok, OpenXchangeClient.Model.ShareLinkResponse.t} | {:error, Tesla.Env.t}
  def get_share_link(connection, session, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/share/management?action&#x3D;getLink")
    |> add_param(:query, :"session", session)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.ShareLinkResponse{}}
    ])
  end

  @doc """
  Sends a share link.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - body (ShareLinkSendBody): A JSON object containing the share target and a list of recipients specified in a field `recipients` that is a JSON array with a nested two-elements array containing the recipient information (first element is personal name, second is email address). An optional field `message` can contain a notification. 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.ShareLinkSendResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec send_share_link(Tesla.Env.client, String.t, OpenXchangeClient.Model.ShareLinkSendBody.t, keyword()) :: {:ok, OpenXchangeClient.Model.ShareLinkSendResponse.t} | {:error, Tesla.Env.t}
  def send_share_link(connection, session, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/share/management?action&#x3D;sendLink")
    |> add_param(:query, :"session", session)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.ShareLinkSendResponse{}}
    ])
  end

  @doc """
  Updates a share link.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - timestamp (integer()): The timestamp of the last modification of the link. Used to detect concurrent modifications.
  - body (ShareLinkUpdateBody): A JSON object containing the share target and share link properties of the link to update. Only modified fields should be set but at least the share target ones.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.CommonResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_share_link(Tesla.Env.client, String.t, integer(), OpenXchangeClient.Model.ShareLinkUpdateBody.t, keyword()) :: {:ok, OpenXchangeClient.Model.CommonResponse.t} | {:error, Tesla.Env.t}
  def update_share_link(connection, session, timestamp, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/share/management?action&#x3D;updateLink")
    |> add_param(:query, :"session", session)
    |> add_param(:query, :"timestamp", timestamp)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.CommonResponse{}}
    ])
  end
end
