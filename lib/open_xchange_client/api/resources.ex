# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule OpenXchangeClient.Api.Resources do
  @moduledoc """
  API calls for all endpoints tagged `Resources`.
  """

  alias OpenXchangeClient.Connection
  import OpenXchangeClient.RequestBuilder


  @doc """
  Creates a resource.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - body (ResourceData): A JSON object containing the resource data. The field `id` is not present.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.ResourceUpdateResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_resource(Tesla.Env.client, String.t, OpenXchangeClient.Model.ResourceData.t, keyword()) :: {:ok, OpenXchangeClient.Model.ResourceUpdateResponse.t} | {:error, Tesla.Env.t}
  def create_resource(connection, session, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/resource?action&#x3D;new")
    |> add_param(:query, :"session", session)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.ResourceUpdateResponse{}}
    ])
  end

  @doc """
  Deletes resources.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - timestamp (integer()): Timestamp of the last update of the group to delete.
  - body ([OpenXchangeClient.Model.ResourceListElement.t]): A JSON array of objects with the field `id` containing the unique identifier of the resource.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.ResourcesResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_resources(Tesla.Env.client, String.t, integer(), list(OpenXchangeClient.Model.ResourceListElement.t), keyword()) :: {:ok, OpenXchangeClient.Model.ResourcesResponse.t} | {:error, Tesla.Env.t}
  def delete_resources(connection, session, timestamp, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/resource?action&#x3D;delete")
    |> add_param(:query, :"session", session)
    |> add_param(:query, :"timestamp", timestamp)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.ResourcesResponse{}}
    ])
  end

  @doc """
  Gets all resources.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.AllResourcesResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_all_resources(Tesla.Env.client, String.t, keyword()) :: {:ok, OpenXchangeClient.Model.AllResourcesResponse.t} | {:error, Tesla.Env.t}
  def get_all_resources(connection, session, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/resource?action&#x3D;all")
    |> add_param(:query, :"session", session)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.AllResourcesResponse{}}
    ])
  end

  @doc """
  Gets a resource.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - id (integer()): The ID of the resource.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.ResourceResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_resource(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, OpenXchangeClient.Model.ResourceResponse.t} | {:error, Tesla.Env.t}
  def get_resource(connection, session, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/resource?action&#x3D;get")
    |> add_param(:query, :"session", session)
    |> add_param(:query, :"id", id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.ResourceResponse{}}
    ])
  end

  @doc """
  Gets a list of resources.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - body ([OpenXchangeClient.Model.ResourceListElement.t]): A JSON array of JSON objects with the id of the requested resources.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.ResourcesResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_resource_list(Tesla.Env.client, String.t, list(OpenXchangeClient.Model.ResourceListElement.t), keyword()) :: {:ok, OpenXchangeClient.Model.ResourcesResponse.t} | {:error, Tesla.Env.t}
  def get_resource_list(connection, session, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/resource?action&#x3D;list")
    |> add_param(:query, :"session", session)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.ResourcesResponse{}}
    ])
  end

  @doc """
  Gets the new, modified and deleted resources.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - timestamp (integer()): Timestamp of the last update of the requested resources.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.ResourceUpdatesResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_resource_updates(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, OpenXchangeClient.Model.ResourceUpdatesResponse.t} | {:error, Tesla.Env.t}
  def get_resource_updates(connection, session, timestamp, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/resource?action&#x3D;updates")
    |> add_param(:query, :"session", session)
    |> add_param(:query, :"timestamp", timestamp)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.ResourceUpdatesResponse{}}
    ])
  end

  @doc """
  Searches for resources.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - body (ResourceSearchBody): A JSON object with the search parameters.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.ResourcesResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec search_resources(Tesla.Env.client, String.t, OpenXchangeClient.Model.ResourceSearchBody.t, keyword()) :: {:ok, OpenXchangeClient.Model.ResourcesResponse.t} | {:error, Tesla.Env.t}
  def search_resources(connection, session, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/resource?action&#x3D;search")
    |> add_param(:query, :"session", session)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.ResourcesResponse{}}
    ])
  end

  @doc """
  Updates a resource.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - id (integer()): ID of the resource that shall be updated.
  - timestamp (integer()): Timestamp of the last update of the resource to update. If the resource was modified after the specified timestamp, then the update must fail.
  - body (ResourceData): A JSON object containing the resource data fields to change. Only modified fields are present and the field id is omitted.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.CommonResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_resource(Tesla.Env.client, String.t, integer(), integer(), OpenXchangeClient.Model.ResourceData.t, keyword()) :: {:ok, OpenXchangeClient.Model.CommonResponse.t} | {:error, Tesla.Env.t}
  def update_resource(connection, session, id, timestamp, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/resource?action&#x3D;update")
    |> add_param(:query, :"session", session)
    |> add_param(:query, :"id", id)
    |> add_param(:query, :"timestamp", timestamp)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.CommonResponse{}}
    ])
  end
end
