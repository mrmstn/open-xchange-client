# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule OpenXchangeClient.Api.Groups do
  @moduledoc """
  API calls for all endpoints tagged `Groups`.
  """

  alias OpenXchangeClient.Connection
  import OpenXchangeClient.RequestBuilder

  @doc """
  Creates a group.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - body (GroupData): A JSON object containing the group data. The field id is not present.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.GroupUpdateResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_group(
          Tesla.Env.client(),
          String.t(),
          OpenXchangeClient.Model.GroupData.t(),
          keyword()
        ) :: {:ok, OpenXchangeClient.Model.GroupUpdateResponse.t()} | {:error, Tesla.Env.t()}
  def create_group(connection, session, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/group?action&#x3D;new")
    |> add_param(:query, :session, session)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %OpenXchangeClient.Model.GroupUpdateResponse{}}
    ])
  end

  @doc """
  Deletes a group.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - timestamp (integer()): Timestamp of the last update of the group to delete.
  - body (GroupListElement): A JSON object with the field `id` containing the unique identifier of the group.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.GroupsResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_group(
          Tesla.Env.client(),
          String.t(),
          integer(),
          OpenXchangeClient.Model.GroupListElement.t(),
          keyword()
        ) :: {:ok, OpenXchangeClient.Model.GroupsResponse.t()} | {:error, Tesla.Env.t()}
  def delete_group(connection, session, timestamp, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/group?action&#x3D;delete")
    |> add_param(:query, :session, session)
    |> add_param(:query, :timestamp, timestamp)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %OpenXchangeClient.Model.GroupsResponse{}}
    ])
  end

  @doc """
  Gets all groups.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - columns (String.t): A comma-separated list of columns to return, like \"1,700\". Each column is specified by a numeric column identifier, see [Group data](#group-data).
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.GroupsResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_all_groups(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, OpenXchangeClient.Model.GroupsResponse.t()} | {:error, Tesla.Env.t()}
  def get_all_groups(connection, session, columns, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/group?action&#x3D;all")
    |> add_param(:query, :session, session)
    |> add_param(:query, :columns, columns)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %OpenXchangeClient.Model.GroupsResponse{}}
    ])
  end

  @doc """
  Gets a group.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - id (integer()): The ID of the group.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.GroupResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_group(Tesla.Env.client(), String.t(), integer(), keyword()) ::
          {:ok, OpenXchangeClient.Model.GroupResponse.t()} | {:error, Tesla.Env.t()}
  def get_group(connection, session, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/group?action&#x3D;get")
    |> add_param(:query, :session, session)
    |> add_param(:query, :id, id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %OpenXchangeClient.Model.GroupResponse{}}
    ])
  end

  @doc """
  Gets a list of groups.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - body ([OpenXchangeClient.Model.GroupListElement.t]): A JSON array of JSON objects with the id of the requested groups.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.GroupsResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_group_list(
          Tesla.Env.client(),
          String.t(),
          list(OpenXchangeClient.Model.GroupListElement.t()),
          keyword()
        ) :: {:ok, OpenXchangeClient.Model.GroupsResponse.t()} | {:error, Tesla.Env.t()}
  def get_group_list(connection, session, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/group?action&#x3D;list")
    |> add_param(:query, :session, session)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %OpenXchangeClient.Model.GroupsResponse{}}
    ])
  end

  @doc """
  Gets the new, modified and deleted groups.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - timestamp (integer()): Timestamp of the last update of the requested groups.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.GroupUpdatesResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_group_updates(Tesla.Env.client(), String.t(), integer(), keyword()) ::
          {:ok, OpenXchangeClient.Model.GroupUpdatesResponse.t()} | {:error, Tesla.Env.t()}
  def get_group_updates(connection, session, timestamp, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/group?action&#x3D;updates")
    |> add_param(:query, :session, session)
    |> add_param(:query, :timestamp, timestamp)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %OpenXchangeClient.Model.GroupUpdatesResponse{}}
    ])
  end

  @doc """
  Searches for groups.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - body (GroupSearchBody): A JSON object with the search parameters.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.GroupsResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec search_groups(
          Tesla.Env.client(),
          String.t(),
          OpenXchangeClient.Model.GroupSearchBody.t(),
          keyword()
        ) :: {:ok, OpenXchangeClient.Model.GroupsResponse.t()} | {:error, Tesla.Env.t()}
  def search_groups(connection, session, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/group?action&#x3D;search")
    |> add_param(:query, :session, session)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %OpenXchangeClient.Model.GroupsResponse{}}
    ])
  end

  @doc """
  Updates a group.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - id (integer()): ID of the group that shall be updated.
  - timestamp (integer()): Timestamp of the last update of the group to update. If the group was modified after the specified timestamp, then the update must fail.
  - body (GroupData): A JSON object containing the group data fields to change. Only modified fields are present and the field id is omitted.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.CommonResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_group(
          Tesla.Env.client(),
          String.t(),
          integer(),
          integer(),
          OpenXchangeClient.Model.GroupData.t(),
          keyword()
        ) :: {:ok, OpenXchangeClient.Model.CommonResponse.t()} | {:error, Tesla.Env.t()}
  def update_group(connection, session, id, timestamp, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/group?action&#x3D;update")
    |> add_param(:query, :session, session)
    |> add_param(:query, :id, id)
    |> add_param(:query, :timestamp, timestamp)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %OpenXchangeClient.Model.CommonResponse{}}
    ])
  end
end
