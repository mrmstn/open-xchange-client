# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule OpenXchangeClient.Api.File do
  @moduledoc """
  API calls for all endpoints tagged `File`.
  """

  alias OpenXchangeClient.Connection
  import OpenXchangeClient.RequestBuilder


  @doc """
  Requests a formerly uploaded file.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - id (String.t): The ID of the uploaded file.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_file(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def get_file(connection, session, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/file?action&#x3D;get")
    |> add_param(:query, :"session", session)
    |> add_param(:query, :"id", id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 404, false}
    ])
  end

  @doc """
  Updates a file's last access timestamp and keeps it alive.
  By updating the last access timestamp the file is prevented from being deleted from both session and disk storage. 

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - id (String.t): The ID of the uploaded file whose timestamp should be updated.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OpenXchangeClient.Model.CommonResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec keep_alive(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, OpenXchangeClient.Model.CommonResponse.t} | {:error, Tesla.Env.t}
  def keep_alive(connection, session, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/file?action&#x3D;keepalive")
    |> add_param(:query, :"session", session)
    |> add_param(:query, :"id", id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.CommonResponse{}}
    ])
  end

  @doc """
  Uploads a file.
  It can be uploaded multiple files at once. Each file must be specified in an own form field (the form field name is arbitrary). 

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - module (String.t): The module for which the file is uploaded to determine proper upload quota constraints (e.g. \"mail\", \"infostore\", etc.).
  - type (String.t): The file type filter to define which file types are allowed during upload. Currently supported filters are: file (for all), text (for `text/*`), media (for image, audio or video), image (for `image/*`), audio (for `audio/*`), video (for `video/*`) and application (for `application/*`).
  - file (String.t): The file to upload.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec upload_file(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def upload_file(connection, session, module, type, file, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/file?action&#x3D;new")
    |> add_param(:query, :"session", session)
    |> add_param(:query, :"module", module)
    |> add_param(:query, :"type", type)
    |> add_param(:file, :"file", file)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false}
    ])
  end
end
