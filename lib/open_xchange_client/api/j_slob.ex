# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule OpenXchangeClient.Api.JSlob do
  @moduledoc """
  API calls for all endpoints tagged `JSlob`.
  """

  alias OpenXchangeClient.Connection
  import OpenXchangeClient.RequestBuilder


  @doc """
  Gets all JSlobs.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - opts (KeywordList): [optional] Optional parameters
    - :service_id (String.t): The identifier for the JSlob service, default is \"com.openexchange.jslob.config\".
  ## Returns

  {:ok, OpenXchangeClient.Model.JSlobsResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_all_j_slobs(Tesla.Env.client, String.t, keyword()) :: {:ok, OpenXchangeClient.Model.JSlobsResponse.t} | {:error, Tesla.Env.t}
  def get_all_j_slobs(connection, session, opts \\ []) do
    optional_params = %{
      :"serviceId" => :query
    }
    %{}
    |> method(:get)
    |> url("/jslob?action&#x3D;all")
    |> add_param(:query, :"session", session)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.JSlobsResponse{}}
    ])
  end

  @doc """
  Gets a list of JSlobs.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - body ([String.t]): A JSON array with the identifiers of the requested JSlobs.
  - opts (KeywordList): [optional] Optional parameters
    - :service_id (String.t): The identifier for the JSlob service, default is \"com.openexchange.jslob.config\".
  ## Returns

  {:ok, OpenXchangeClient.Model.JSlobsResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_j_slob_list(Tesla.Env.client, String.t, list(String.t), keyword()) :: {:ok, OpenXchangeClient.Model.JSlobsResponse.t} | {:error, Tesla.Env.t}
  def get_j_slob_list(connection, session, body, opts \\ []) do
    optional_params = %{
      :"serviceId" => :query
    }
    %{}
    |> method(:put)
    |> url("/jslob?action&#x3D;list")
    |> add_param(:query, :"session", session)
    |> add_param(:body, :body, body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.JSlobsResponse{}}
    ])
  end

  @doc """
  Stores or deletes a JSlob.
  To delete a JSON configuration just send an empty request body for the specified `id`.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - body (map()): A JSON object containing the JSON configuration to store. To delete the JSlob just send an empty body.
  - opts (KeywordList): [optional] Optional parameters
    - :id (String.t): The JSlob indentifier.
    - :service_id (String.t): The identifier for the JSlob service, default is \"com.openexchange.jslob.config\".
  ## Returns

  {:ok, OpenXchangeClient.Model.CommonResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec set_j_slob(Tesla.Env.client, String.t, %{optional(String.t) => }, keyword()) :: {:ok, OpenXchangeClient.Model.CommonResponse.t} | {:error, Tesla.Env.t}
  def set_j_slob(connection, session, body, opts \\ []) do
    optional_params = %{
      :"id" => :query,
      :"serviceId" => :query
    }
    %{}
    |> method(:put)
    |> url("/jslob?action&#x3D;set")
    |> add_param(:query, :"session", session)
    |> add_param(:body, :body, body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.CommonResponse{}}
    ])
  end

  @doc """
  Updates a JSlob.

  ## Parameters

  - connection (OpenXchangeClient.Connection): Connection to server
  - session (String.t): A session ID previously obtained from the login module.
  - body (map()): The JSON object containing the updated JSON configuration to store. Fields that are not included are thus not affected and survive the change. Use `/jslob?action=set` to delete fields or entire JSlob.
  - opts (KeywordList): [optional] Optional parameters
    - :id (String.t): The JSlob indentifier.
    - :service_id (String.t): The identifier for the JSlob service, default is \"com.openexchange.jslob.config\".
  ## Returns

  {:ok, OpenXchangeClient.Model.CommonResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_j_slob(Tesla.Env.client, String.t, %{optional(String.t) => }, keyword()) :: {:ok, OpenXchangeClient.Model.CommonResponse.t} | {:error, Tesla.Env.t}
  def update_j_slob(connection, session, body, opts \\ []) do
    optional_params = %{
      :"id" => :query,
      :"serviceId" => :query
    }
    %{}
    |> method(:put)
    |> url("/jslob?action&#x3D;update")
    |> add_param(:query, :"session", session)
    |> add_param(:body, :body, body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OpenXchangeClient.Model.CommonResponse{}}
    ])
  end
end
